available packages
a <- available.packages()
head(rownames(a),3)
head(rownames(a),10)
install.packages("KernSmooth")
library(KernSmooth)
search()
install.packages('swirl')
install_from_swirl("R Programming")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
library(datasets)
data(irsi)
data(irsis)
data(iris)
iris
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
subdata <- iris[iris$Species = "virginica", ]
subdata <- iris[iris$Species == "virginica", ]
subdata
mean(subdata$Sepal.Length)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
rnorm(10)
runif(10)
rnorm(10,1)
c(1:5, 10.5, "next")
f <- gl(3, 10)
View(iris)
iris$Species
levels(iris$Species)
tapply(iris, levels(iris$Species), mean)
tapply(iris$Sepal.Length, iris$Species, mean)
data(mtcars)
mtcars
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp$4
hp.4
hp$4
hp[4]
hp['4']
hp['4'] - hp['8']
debug(ls)
ls
tapply(iris$Sepal.Length, iris$Species, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
e
undebug(ls)
undebug(ls)
ยง
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp['4'] - hp['8']\
hp['4'] - hp['8']
swirl
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <_ is.na(my_data)
my_na <- is.na(my_data)
my>na
my_na
my_data ==NA
sum(my_na)
my_data
0/0
Inf-Inf
1
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0])
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2,
| norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA).
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
my_vector
attribute(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- vector("Bill", "Gina", "Kelly", "Sean")
patients <- vector(c("Bill", "Gina", "Kelly", "Sean")
)
patients <- vector(c("Bill", "Gina", "Kelly", "Sean"))
?vector
patients <- c( "Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
colnames(cnames, my_data)
colnames(cnames)
colnames(my_data) <- cnames
my_data
install_from_swirl("Getting and Cleaning Data")
data <- read.csv(file="activity.csv", header=TRUE)
#convert interval to a factor:
data$interval <- factor(data$interval)
library(dplyr)
setwd("~/Projects/Github/RepData_PeerAssessment1")
data <- read.csv(file="activity.csv", header=TRUE)
#convert interval to a factor:
data$interval <- factor(data$interval)
library(dplyr)
library(ggplot2)
per_day <- group_by(data, date)
stepsPerDay <- summarise(per_day, totalSteps=sum(steps))
hist(stepsPerDay$totalSteps, breaks=10)
mean(stepsPerDay$totalSteps, na.rm = TRUE)
median(stepsPerDay$totalSteps, na.rm = TRUE)
per_interval <- group_by(data, interval)
stepsPerInterval <- summarise(per_interval, averageSteps=mean(steps, na.rm=TRUE))
plot(stepsPerInterval$interval, stepsPerInterval$averageSteps )
lines(stepsPerInterval$interval, stepsPerInterval$averageSteps, type="l")
which.max(stepsPerInterval$averageSteps)
sum(is.na(data$steps))
per_day <- group_by(data, date)
#get average steps per interval per day
averageStepsPerDay <- summarise(per_day, averageSteps=mean(steps))
#Set all NA to be 0
averageStepsPerDay$averageSteps[is.na(averageStepsPerDay$averageSteps)] <- 0
filledData <- merge(data, averageStepsPerDay, by="date")
filledData$steps[is.na(filledData$steps)] <- filledData$averageSteps[is.na(filledData$steps)]
per_day2 <- group_by(filledData, date)
stepsPerDay2 <- summarise(per_day2, totalSteps=sum(steps))
hist(stepsPerDay2$totalSteps, breaks=10)
mean(stepsPerDay2$totalSteps, na.rm = TRUE)
median(stepsPerDay2$totalSteps, na.rm = TRUE)
filledData$day <- weekdays(as.Date(filledData$date,'%Y-%m-%d'))
filledData$weekday <- ifelse(filledData$day %in% c("Saturday", "Sunday"), "Weekend", "Weekday")
filledData$weekday <- factor(filledData$weekday)
groups2 <- group_by(filledData, weekday, interval)
weekdayData2 <- summarise(groups2, sum(steps))
qplot(interval, averageSteps, data=weekdayData, facets = .~weekday, geom="line", main="Name")
weekdayData <- summarise(groups2, sum(steps))
qplot(interval, averageSteps, data=weekdayData, facets = .~weekday, geom="line", main="Name")
weekdayData <- summarise(groups2, averageSteps=sum(steps))
qplot(interval, averageSteps, data=weekdayData, facets = .~weekday, geom="line", main="Name")
groups2 <- group_by(filledData, weekday, interval)
groups2
str(groups2)
weekdayData <- summarise(groups2, averageSteps=sum(steps))
weekdayData
weekdayData <- summarise(groups2, averageSteps=mean(steps))
weekdayData
groups2 <- group_by(filledData, interval,weekday)
weekdayData <- summarise(groups2, averageSteps=mean(steps))
qplot(interval, averageSteps, data=weekdayData, facets = .~weekday, geom="line", main="Name")
library(lattice)
xyplot(averageSteps ~ interval | weekday, data=weekdayData)
xyplot(averageSteps ~ interval | weekday, data=weekdayData,type='b')
xyplot(averageSteps ~ interval | weekday, data=weekdayData,type='l')
xyplot(averageSteps ~ interval | weekday, data=weekdayData,type='l', layout=c(1,2))
xyplot(averageSteps ~ interval | weekday, data=weekdayData,type='l', layout=c(1,2), main="Average steps per interval - Weekend vs Weekdays")
xyplot(averageSteps ~ interval | weekday, data=weekdayData,type='l', layout=c(1,2), main="Average steps per interval - Weekend vs Weekdays", xlab="Interval", ylab="Average Steps")
hist(stepsPerDay$totalSteps, breaks=10, main="Histogram of total nr of steps taken each day")
The values are different. This is mostly because many of the missing values became 0, skewing the mean and median.
